import { BaseCallbackConfig } from "../callbacks/manager.js";
import { Serializable } from "../load/serializable.js";
import { IterableReadableStream } from "../util/stream.js";
export type RunnableConfig = BaseCallbackConfig;
export declare abstract class Runnable<RunInput, CallOptions extends RunnableConfig, RunOutput> extends Serializable {
    abstract invoke(input: RunInput, options?: CallOptions): Promise<RunOutput>;
    protected _getOptionsList(options: CallOptions | CallOptions[], length?: number): CallOptions[];
    batch(inputs: RunInput[], options?: CallOptions | CallOptions[], batchOptions?: {
        maxConcurrency?: number;
    }): Promise<RunOutput[]>;
    _streamIterator(input: RunInput, options?: CallOptions): AsyncGenerator<RunOutput>;
    stream(input: RunInput, options?: CallOptions): Promise<IterableReadableStream<RunOutput>>;
    protected _separateRunnableConfigFromCallOptions(options: CallOptions): [RunnableConfig, Omit<CallOptions, keyof RunnableConfig>];
}
