"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runnable = void 0;
const serializable_js_1 = require("../load/serializable.cjs");
const stream_js_1 = require("../util/stream.cjs");
class Runnable extends serializable_js_1.Serializable {
    _getOptionsList(options, length = 0) {
        if (Array.isArray(options)) {
            if (options.length !== length) {
                throw new Error(`Passed "options" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);
            }
            return options;
        }
        return Array.from({ length }, () => options);
    }
    async batch(inputs, options, batchOptions) {
        const configList = this._getOptionsList((options ?? {}), inputs.length);
        const batchSize = batchOptions?.maxConcurrency && batchOptions.maxConcurrency > 0
            ? batchOptions?.maxConcurrency
            : inputs.length;
        const batchResults = [];
        for (let i = 0; i < inputs.length; i += batchSize) {
            const batchPromises = inputs
                .slice(i, i + batchSize)
                .map((input, i) => this.invoke(input, configList[i]));
            const batchResult = await Promise.all(batchPromises);
            batchResults.push(batchResult);
        }
        return batchResults.flat();
    }
    async *_streamIterator(input, options) {
        yield this.invoke(input, options);
    }
    async stream(input, options) {
        return stream_js_1.IterableReadableStream.fromAsyncGenerator(this._streamIterator(input, options));
    }
    _separateRunnableConfigFromCallOptions(options) {
        const runnableConfig = {
            callbacks: options.callbacks,
            tags: options.tags,
            metadata: options.metadata,
        };
        const callOptions = { ...options };
        delete callOptions.callbacks;
        delete callOptions.tags;
        delete callOptions.metadata;
        return [runnableConfig, callOptions];
    }
}
exports.Runnable = Runnable;
